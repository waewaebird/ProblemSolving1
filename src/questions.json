[
  {
    "number": "s 1",
    "title": "문자 찾기",
    "description": "한 개의 문자열을 입력받고, 특정 문자를 입력받아 해당 특정문자가 입력받은 문자열에 몇 개 존재하는지 알아내는 프로그램을 작성하세요. 대소문자를 구분하지 않습니다.문자열의 길이는 100을 넘지 않습니다.",
    "input": "첫 줄에 문자열이 주어지고, 두 번째 줄에 문자가 주어진다. 문자열은 영어 알파벳으로만 구성되어 있습니다.",
    "output": "첫 줄에 해당 문자의 개수를 출력한다.",
    "ex1": [
      "Computercooler",
      "c"
    ],
    "ex2": [
      "2"
    ]
  },
  {
    "number": "s 2",
    "title": "대소문자 변환",
    "description": "대문자와 소문자가 같이 존재하는 문자열을 입력받아 대문자는 소문자로 소문자는 대문자로 변환하여 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 문자열이 입력된다. 문자열의 길이는 100을 넘지 않습니다. 문자열은 영어 알파벳으로만 구성되어 있습니다.",
    "output": "첫 줄에 대문자는 소문자로, 소문자는 대문자로 변환된 문자열을 출력합니다.",
    "ex1": "StuDY",
    "ex2": "sTUdy"
  },
  {
    "number": "s 3",
    "title": "문장 속 단어",
    "description": "한 개의 문장이 주어지면 그 문장 속에서 가장 긴 단어를 출력하는 프로그램을 작성하세요. 문장속의 각 단어는 공백으로 구분됩니다.",
    "input": "첫 줄에 길이가 100을 넘지 않는 한 개의 문장이 주어집니다. 문장은 영어 알파벳으로만 구성되어 있습니다.",
    "output": "첫 줄에 가장 긴 단어를 출력한다. 가장 길이가 긴 단어가 여러개일 경우 문장속에서 가장 앞쪽에 위치한 단어를 답으로 합니다.",
    "ex1": "it is time to study",
    "ex2": "study"
  },
  {
    "number": "s 4",
    "title": "단어 뒤집기",
    "description": "N개의 단어가 주어지면 각 단어를 뒤집어 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 자연수 N(3<=N<=20)이 주어집니다. 두 번째 줄부터 N개의 단어가 각 줄에 하나씩 주어집니다. 단어는 영어 알파벳으로만 구성되어 있습니다.",
    "output": "N개의 단어를 입력된 순서대로 한 줄에 하나씩 뒤집어서 출력합니다.",
    "ex1": [
      "3",
      "good",
      "Time",
      "Big"
      ],
    "ex2": [
      "doog",
      "emiT",
      "giB"
      ]
  },
  {
    "number": "s 5",
    "title": "특정 문자 뒤집기",
    "description": "영어 알파벳과 특수문자로 구성된 문자열이 주어지면 영어 알파벳만 뒤집고, 특수문자는 자기 자리에 그대로 있는 문자열을 만들어 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 길이가 100을 넘지 않는 문자열이 주어집니다.",
    "output": "첫 줄에 알파벳만 뒤집힌 문자열을 출력합니다.",
    "ex1": "a#b!GE*T@S",
    "ex2": "S#T!EG*b@a"
  },
  {
    "number": "s 6",
    "title": "중복문자제거",
    "description": "소문자로 된 한개의 문자열이 입력되면 중복된 문자를 제거하고 출력하는 프로그램을 작성하세요. 중복이 제거된 문자열의 각 문자는 원래 문자열의 순서를 유지합니다.",
    "input": "첫 줄에 문자열이 입력됩니다. 문자열의 길이는 100을 넘지 않는다.",
    "output": "첫 줄에 중복문자가 제거된 문자열을 출력합니다.",
    "ex1": "ksekkset",
    "ex2": "kset"
  },
  {
    "number": "s 7",
    "title": "회문 문자열",
    "description": "앞에서 읽을 때나 뒤에서 읽을 때나 같은 문자열을 회문 문자열이라고 합니다. 문자열이 입력되면 해당 문자열이 회문 문자열이면 \"YES\", 회문 문자열이 아니면 “NO\"를 출력하는 프로그램을 작성하세요. 단 회문을 검사할 때 대소문자를 구분하지 않습니다.",
    "input": "첫 줄에 길이 100을 넘지 않는 공백이 없는 문자열이 주어집니다.",
    "output": "첫 번째 줄에 회문 문자열인지의 결과를 YES 또는 NO로 출력합니다.",
    "ex1": "gooG",
    "ex2": "YES"
  },
  {
    "number": "s 8",
    "title": "유효한 팰린드롬",
    "description": "앞에서 읽을 때나 뒤에서 읽을 때나 같은 문자열을 팰린드롬이라고 합니다. 문자열이 입력되면 해당 문자열이 팰린드롬이면 \"YES\", 아니면 “NO\"를 출력하는 프로그램을 작성하세요. 단 회문을 검사할 때 알파벳만 가지고 회문을 검사하며, 대소문자를 구분하지 않습니다. 알파벳 이외의 문자들의 무시합니다.",
    "input": "첫 줄에 길이 100을 넘지 않는 공백이 없는 문자열이 주어집니다.",
    "output": "첫 번째 줄에 팰린드롬인지의 결과를 YES 또는 NO로 출력합니다.",
    "ex1": "found7, time: study; Yduts; emit, 7Dnuof",
    "ex2": "YES"
  },
  {
    "number": "s 9",
    "title": "숫자만 추출",
    "description": "문자와 숫자가 섞여있는 문자열이 주어지면 그 중 숫자만 추출하여 그 순서대로 자연수를 만듭니다. 만약 “tge0a1h205er”에서 숫자만 추출하면 0, 1, 2, 0, 5이고 이것을 자연수를 만들면 1205이 됩니다. 추출하여 만들어지는 자연수는 100,000,000을 넘지 않습니다.",
    "input": "첫 줄에 숫자가 섞인 문자열이 주어집니다. 문자열의 길이는 100을 넘지 않습니다.",
    "output": "첫 줄에 자연수를 출력합니다.",
    "ex1": "g0en2T0s8eSoft",
    "ex2": "208"
  },
  {
    "number": "s 10",
    "title": "가장 짧은 문자거리",
    "description": "첫 번째 줄에 문자열 s와 문자 t가 주어진다. 문자열과 문자는 소문자로만 주어집니다. 문자열의 길이는 100을 넘지 않는다.",
    "input": "첫 줄에 문자열이 입력됩니다. 문자열의 길이는 100을 넘지 않는다.",
    "output": "첫 번째 줄에 각 문자열 s의 각 문자가 문자 t와 떨어진 거리를 순서대로 출력한다.",
    "ex1": "teachermode e",
    "ex2": "1 0 1 2 1 0 1 2 2 1 0"
  },
  {
    "number": "s 11",
    "title": "문자열 압축",
    "description": "알파벳 대문자로 이루어진 문자열을 입력받아 같은 문자가 연속으로 반복되는 경우 반복되는 문자 바로 오른쪽에 반복 횟수를 표기하는 방법으로 문자열을 압축하는 프로그램을 작성하시오. 단 반복횟수가 1인 경우 생략합니다.",
    "input": "첫 줄에 문자열이 주어진다. 문자열의 길이는 100을 넘지 않는다.",
    "output": "첫 줄에 압축된 문자열을 출력한다.",
    "ex1": [
      "KKHSSSSSSSE",
      "K2HS7E"
    ],
    "ex2": [
      "KSTTTSEEKFKKKDJJGG",
      "KST3SE2KFK3DJ2G2"
    ]
  },
  {
    "number": "s 12",
    "title": "암호",
    "description": "현수는 영희에게 알파벳 대문자로 구성된 비밀편지를 매일 컴퓨터를 이용해 보냅니다.\n\n비밀편지는 현수와 영희가 서로 약속한 암호로 구성되어 있습니다.\n\n비밀편지는 알파벳 한 문자마다 # 또는 *이 일곱 개로 구성되어 있습니다.\n\n만약 현수가 “#*****#”으로 구성된 문자를 보냈다면 영희는 현수와 약속한 규칙대로 다음과 같이 해석합니다.\n\n1. “#*****#”를 일곱자리의 이진수로 바꿉니다. #은 이진수의 1로, *이진수의 0으로 변환합니다. 결과는 “1000001”로 변환됩니다.\n\n2. 바뀐 2진수를 10진수화 합니다. “1000001”을 10진수화 하면 65가 됩니다.\n\n3. 아스키 번호가 65문자로 변환합니다. 즉 아스크번호 65는 대문자 'A'입니다. 참고로 대문자들의 아스키 번호는 'A'는 65번, ‘B'는 66번, ’C'는 67번 등 차례대로 1씩 증가하여 ‘Z'는 90번입니다.\n\n현수가 4개의 문자를 다음과 같이 신호로 보냈다면\n\n#****###**#####**#####**##**\n\n이 신호를 4개의 문자신호로 구분하면\n\n#****## --> 'C'\n\n#**#### --> 'O'\n\n#**#### --> 'O'\n\n#**##** --> 'L'\n\n최종적으로 “COOL\"로 해석됩니다.\n\n현수가 보낸 신호를 해석해주는 프로그램을 작성해서 영희를 도와주세요.",
    "input": "첫 줄에는 보낸 문자의 개수(10을 넘지 안습니다)가 입력된다. 다음 줄에는 문자의 개수의 일곱 배 만큼의 #또는 * 신호가 입력됩니다. 현수는 항상 대문자로 해석할 수 있는 신호를 보낸다고 가정합니다.",
    "output": "영희가 해석한 문자열을 출력합니다.",
    "ex1": [
      "4",
      "#****###**#####**#####**##**"
    ],
    "ex2": [
      "COOL"
    ]
  },
  {
    "number": "a 1",
    "title": "큰 수 출력하기",
    "description": "N개의 정수를 입력받아, 자신의 바로 앞 수보다 큰 수만 출력하는 프로그램을 작성하세요. (첫 번째 수는 무조건 출력한다)",
    "input": "첫 줄에 자연수 N(1<=N<=100)이 주어지고, 그 다음 줄에 N개의 정수가 입력된다.",
    "output": "자신의 바로 앞 수보다 큰 수만 한 줄로 출력한다.",
    "ex1": [
      "6",
      "7 3 9 5 6 12"
    ],
    "ex2": [
      "7 9 6 12"
    ]
  },
  {
    "number": "a 2",
    "title": "보이는 학생",
    "description": "선생님이 N명의 학생을 일렬로 세웠습니다. 일렬로 서 있는 학생의 키가 앞에서부터 순서대로 주어질 때, 맨 앞에 서 있는\n\n선생님이 볼 수 있는 학생의 수를 구하는 프로그램을 작성하세요. (앞에 서 있는 사람들보다 크면 보이고, 작거나 같으면 보이지 않습니다.)",
    "input": "첫 줄에 정수 N(5<=N<=100,000)이 입력된다. 그 다음줄에 N명의 학생의 키가 앞에서부터 순서대로 주어진다.",
    "output": "선생님이 볼 수 있는 최대학생수를 출력한다.",
    "ex1": [
      "8",
      "130 135 148 140 145 150 150 153"
    ],
    "ex2": [
      "5"
    ]
  },
  {
    "number": "a 3",
    "title": "가위 바위 보",
    "description": "A, B 두 사람이 가위바위보 게임을 합니다. 총 N번의 게임을 하여 A가 이기면 A를 출력하고, B가 이기면 B를 출력합니다. 비길 경우에는 D를 출력합니다.\n\n가위, 바위, 보의 정보는 1:가위, 2:바위, 3:보로 정하겠습니다.\n\n예를 들어 N=5이면 ~~~~ 두 사람의 각 회의 가위, 바위, 보 정보가 주어지면 각 회를 누가 이겼는지 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 게임 횟수인 자연수 N(1<=N<=100)이 주어집니다.\n\n두 번째 줄에는 A가 낸 가위, 바위, 보 정보가 N개 주어집니다.\n\n세 번째 줄에는 B가 낸 가위, 바위, 보 정보가 N개 주어집니다.",
    "output": "각 줄에 각 회의 승자를 출력합니다. 비겼을 경우는 D를 출력합니다.",
    "ex1": [
      "5",
      "2 3 3 1 3",
      "1 1 2 2 3"
    ],
    "ex2": [
      "A",
      "B",
      "A",
      "B",
      "D"
    ]
  },
  {
    "number": "a 4",
    "title": "피보나치 수열",
    "description": "1) 피보나키 수열을 출력한다. 피보나치 수열이란 앞의 2개의 수를 합하여 다음 숫자가 되는 수열이다. 2) 입력은 피보나치 수열의 총 항의 수 이다. 만약 7이 입력되면 1 1 2 3 5 8 13을 출력하면 된다.",
    "input": "첫 줄에 총 항수 N(3<=N<=45)이 입력된다.",
    "output": "첫 줄에 피보나치 수열을 출력합니다.",
    "ex1": [
      "10"
    ],
    "ex2": [
      "1 1 2 3 5 8 13 21 34 55"
    ]
  },
  {
    "number": "a 5",
    "title": "소수(에라토스테네스 체)",
    "description": "자연수 N이 입력되면 1부터 N까지의 소수의 개수를 출력하는 프로그램을 작성하세요.\n\n만약 20이 입력되면 1부터 20까지의 소수는 2, 3, 5, 7, 11, 13, 17, 19로 총 8개입니다.",
    "input": "첫 줄에 자연수의 개수 N(2<=N<=200,000)이 주어집니다.",
    "output": "첫 줄에 소수의 개수를 출력합니다.",
    "ex1": [
      "20"
    ],
    "ex2": [
      "8"
    ]
  },
  {
    "number": "a 6",
    "title": "뒤집은 소수",
    "description": "N개의 자연수가 입력되면 각 자연수를 뒤집은 후 그 뒤집은 수가 소수이면 그 소수를 출력하는 프로그램을 작성하세요.\n\n예를 들어 32를 뒤집으면 23이고, 23은 소수이다. 그러면 23을 출력한다. 단 910를 뒤집으면 19로 숫자화 해야 한다.\n\n첫 자리부터의 연속된 0은 무시한다.",
    "input": "첫 줄에 자연수의 개수 N(3<=N<=100)이 주어지고, 그 다음 줄에 N개의 자연수가 주어진다.\n\n각 자연수의 크기는 100,000를 넘지 않는다.",
    "output": "첫 줄에 뒤집은 소수를 출력합니다. 출력순서는 입력된 순서대로 출력합니다.",
    "ex1": [
      "9",
      "32 55 62 20 250 370 200 30 100"
    ],
    "ex2": [
      "23 2 73 2 3"
    ]
  },
  {
    "number": "a 7",
    "title": "점수계산",
    "description": "OX 문제는 맞거나 틀린 두 경우의 답을 가지는 문제를 말한다.\n\n여러 개의 OX 문제로 만들어진 시험에서 연속적으로 답을 맞히는 경우에는 가산점을 주기 위해서 다음과 같이 점수 계산을 하기로 하였다.\n\n1번 문제가 맞는 경우에는 1점으로 계산한다. 앞의 문제에 대해서는 답을 틀리다가 답이 맞는 처음 문제는 1점으로 계산한다.\n\n또한, 연속으로 문제의 답이 맞는 경우에서 두 번째 문제는 2점, 세 번째 문제는 3점, ..., K번째 문제는 K점으로 계산한다. 틀린 문제는 0점으로 계산한다.\n\n예를 들어, 아래와 같이 10 개의 OX 문제에서 답이 맞은 문제의 경우에는 1로 표시하고, 틀린 경우에는 0으로 표시하였을 때,\n\n점수 계산은 아래 표와 같이 계산되어, 총 점수는 1+1+2+3+1+2=10 점이다. 시험문제의 채점 결과가 주어졌을 때, 총 점수를 계산하는 프로그램을 작성하시오.",
    "input": "첫째 줄에 문제의 개수 N (1 ≤ N ≤ 100)이 주어진다. 둘째 줄에는 N개 문제의 채점 결과를 나타내는 0 혹은 1이 빈 칸을 사이에 두고 주어진다.\n\n0은 문제의 답이 틀린 경우이고, 1은 문제의 답이 맞는 경우이다.",
    "output": "첫째 줄에 입력에서 주어진 채점 결과에 대하여 가산점을 고려한 총 점수를 출력한다.",
    "ex1": [
      "10",
      "1 0 1 1 1 0 0 1 1 0"
    ],
    "ex2": [
      "10"
    ]
  },
  {
    "number": "a 8",
    "title": "등수구하기",
    "description": "N명의 학생의 국어점수가 입력되면 각 학생의 등수를 입력된 순서대로 출력하는 프로그램을 작성하세요.\n\n같은 점수가 입력될 경우 높은 등수로 동일 처리한다.\n\n즉 가장 높은 점수가 92점인데 92점이 3명 존재하면 1등이 3명이고 그 다음 학생은 4등이 된다.",
    "input": "첫 줄에 N(3<=N<=100)이 입력되고, 두 번째 줄에 국어점수를 의미하는 N개의 정수가 입력된다.",
    "output": "첫 줄에 N(3<=N<=100)이 입력되고, 두 번째 줄에 국어점수를 의미하는 N개의 정수가 입력된다.",
    "ex1": [
      "5",
      "87 89 92 100 76"
    ],
    "ex2": [
      "4 3 2 1 5"
    ]
  },
  {
    "number": "a 9",
    "title": "격자판 최대합",
    "description": "5*5 격자판에 아래롸 같이 숫자가 적혀있습니다. N*N의 격자판이 주어지면 각 행의 합, 각 열의 합, 두 대각선의 합 중 가 장 큰 합을 출력합니다.",
    "input": "첫 줄에 자연수 N이 주어진다.(2<=N<=50)\n\n두 번째 줄부터 N줄에 걸쳐 각 줄에 N개의 자연수가 주어진다. 각 자연수는 100을 넘지 않는다.",
    "output": "최대합을 출력합니다.",
    "ex1": [
      "5",
      "10 13 10 12 15",
      "12 39 30 23 11",
      "11 25 50 53 15",
      "19 27 29 37 27",
      "19 13 30 13 19"
    ],
    "ex2": [
      "155"
    ]
  },
  {
    "number": "a 10",
    "title": "봉우리",
    "description": "지도 정보가 N*N 격자판에 주어집니다. 각 격자에는 그 지역의 높이가 쓰여있습니다.\n\n각 격자판의 숫자 중 자신의 상하좌우 숫자보다 큰 숫자는 봉우리 지역입니다. 봉우리 지역이 몇 개 있는 지 알아내는 프로그램을 작성하세요.\n\n격자의 가장자리는 0으로 초기화 되었다고 가정한다.\n\n만약 N=5 이고, 격자판의 숫자가 다음과 같다면 봉우리의 개수는 10개입니다.",
    "input": "첫 줄에 자연수 N이 주어진다.(2<=N<=50)\n\n두 번째 줄부터 N줄에 걸쳐 각 줄에 N개의 자연수가 주어진다. 각 자연수는 100을 넘지 않는다.",
    "output": "봉우리의 개수를 출력하세요.",
    "ex1": [
      "5",
      "5 3 7 2 3",
      "3 7 1 6 1",
      "7 2 5 3 4",
      "4 3 6 4 1",
      "8 7 3 5 2"
    ],
    "ex2": [
      "10"
    ]
  },
  {
    "number": "a 11",
    "title": "임시반장 정하기",
    "description": "김갑동 선생님은 올해 6학년 1반 담임을 맡게 되었다.\n\n김갑동 선생님은 우선 임시로 반장을 정하고 학생들이 서로 친숙해진 후에 정식으로 선거를 통해 반장을 선출하려고 한다.\n\n그는 자기반 학생 중에서 1학년부터 5학년까지 지내오면서 한번이라도 같은 반이었던 사람이 가장 많은 학생을 임시 반장으로 정하려 한다.\n\n그래서 김갑동 선생님은 각 학생들이 1학년부터 5학년까지 몇 반에 속했었는지를 나타내는 표를 만들었다.\n\n예를 들어 학생 수가 5명일 때의 표를 살펴보자. Image1.jpg 위 경우에 4번 학생을 보면 3번 학생과 2학년 때 같은 반이었고, 3번 학생 및 5번 학생과 3학년 때 같은 반이었으며,\n\n2번 학생과는 4학년 때 같은 반이었음을 알 수 있다. 그러므로 이 학급에서 4번 학생과 한번이라도\n\n같은 반이었던 사람은 2번 학생, 3번 학생과 5번 학생으로 모두 3명이다.\n\n이 예에서 4번 학생이 전체 학생 중에서 같은 반이었던 학생 수가 제일 많으므로 임시 반장이 된다.\n\n각 학생들이 1학년부터 5학년까지 속했던 반이 주어질 때, 임시 반장을 정하는 프로그램을 작성하시오.",
    "input": "첫째 줄에는 반의 학생 수를 나타내는 정수가 주어진다. 학생 수는 3 이상 1000 이하이다.\n\n둘째 줄부터는 1번 학생부터 차례대로 각 줄마다 1학년부터 5학년까지 몇 반에 속했었는지를 나타내는 5개의 정수가 빈칸 하나를 사이에 두고 주어진다.\n\n주어지는 정수는 모두 1 이상 9 이하의 정수이다.",
    "output": "첫 줄에 임시 반장으로 정해진 학생의 번호를 출력한다.\n\n단, 임시 반장이 될 수 있는 학생이 여러 명인 경우에는 그 중 가장 작은 번호만 출력한다.",
    "ex1": [
      "5",
      "2 3 1 7 3",
      "4 1 9 6 8",
      "5 5 2 4 4",
      "6 5 2 6 7",
      "8 4 2 2 2"
    ],
    "ex2": [
      "4"
    ]
  },
  {
    "number": "ts 1",
    "title": "두 배열 합치기",
    "description": "오름차순으로 정렬이 된 두 배열이 주어지면 두 배열을 오름차순으로 합쳐 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 첫 번째 배열의 크기 N(1<=N<=100)이 주어집니다.\n\n두 번째 줄에 N개의 배열 원소가 오름차순으로 주어집니다.\n\n세 번째 줄에 두 번째 배열의 크기 M(1<=M<=100)이 주어집니다.\n\n네 번째 줄에 M개의 배열 원소가 오름차순으로 주어집니다.\n\n각 리스트의 원소는 int형 변수의 크기를 넘지 않습니다.",
    "output": "오름차순으로 정렬된 배열을 출력합니다.",
    "ex1": [
      "3",
      "1 3 5",
      "5",
      "2 3 6 7 9"
    ],
    "ex2": [
      "1 2 3 3 5 6 7 9"
    ]
  },
  {
    "number": "ts 2",
    "title": "공통원소 구하기",
    "description": "A, B 두 개의 집합이 주어지면 두 집합의 공통 원소를 추출하여 오름차순으로 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 집합 A의 크기 N(1<=N<=30,000)이 주어집니다.\n\n두 번째 줄에 N개의 원소가 주어집니다. 원소가 중복되어 주어지지 않습니다.\n\n세 번째 줄에 집합 B의 크기 M(1<=M<=30,000)이 주어집니다.\n\n네 번째 줄에 M개의 원소가 주어집니다. 원소가 중복되어 주어지지 않습니다.\n\n각 집합의 원소는 1,000,000,000이하의 자연수입니다.",
    "output": "두 집합의 공통원소를 오름차순 정렬하여 출력합니다.",
    "ex1": [
      "5",
      "1 3 9 5 2",
      "5",
      "3 2 5 7 8"
    ],
    "ex2": [
      "2 3 5"
    ]
  },
  {
    "number": "ts 3",
    "title": "최대 매출",
    "description": "현수의 아빠는 제과점을 운영합니다. 현수 아빠는 현수에게 N일 동안의 매출기록을 주고 연속된 K일 동안의 최대 매출액이 얼마인지 구하라고 했습니다.\n\n만약 N=10이고 10일 간의 매출기록이 아래와 같습니다. 이때 K=3이면\n\n12 15 11 20 25 10 20 19 13 15\n\n연속된 3일간의 최대 매출액은 11+20+25=56만원입니다.\n\n여러분이 현수를 도와주세요.",
    "input": "첫 줄에 N(5<=N<=100,000)과 K(2<=K<=N)가 주어집니다.\n\n두 번째 줄에 N개의 숫자열이 주어집니다. 각 숫자는 500이하의 음이 아닌 정수입니다.",
    "output": "첫 줄에 최대 매출액을 출력합니다.",
    "ex1": [
      "10 3",
      "12 15 11 20 25 10 20 19 13 15"
    ],
    "ex2": [
      "56"
    ]
  },
  {
    "number": "ts 4",
    "title": "연속 부분수열",
    "description": "N개의 수로 이루어진 수열이 주어집니다.\n\n이 수열에서 연속부분수열의 합이 특정숫자 M이 되는 경우가 몇 번 있는지 구하는 프로그램을 작성하세요.\n\n만약 N=8, M=6이고 수열이 다음과 같다면\n\n1 2 1 3 1 1 1 2\n\n합이 6이 되는 연속부분수열은 {2, 1, 3}, {1, 3, 1, 1}, {3, 1, 1, 1}로 총 3가지입니다.",
    "input": "첫째 줄에 N(1≤N≤100,000), M(1≤M≤100,000,000)이 주어진다.\n\n수열의 원소값은 1,000을 넘지 않는 자연수이다.",
    "output": "첫째 줄에 경우의 수를 출력한다.",
    "ex1": [
      "8 6",
      "1 2 1 3 1 1 1 2"
    ],
    "ex2": [
      "3"
    ]
  },
  {
    "number": "ts 5",
    "title": "연속된 자연수의 합",
    "description": "N입력으로 양의 정수 N이 입력되면 2개 이상의 연속된 자연수의 합으로 정수 N을 표현하는 방법의 가짓수를 출력하는 프로그램을 작성하세요.\n\n만약 N=15이면\n\n7+8=15\n\n4+5+6=15\n\n1+2+3+4+5=15\n\n와 같이 총 3가지의 경우가 존재한다.",
    "input": "첫 번째 줄에 양의 정수 N(7<=N<1000)이 주어집니다.",
    "output": "첫 줄에 총 경우수를 출력합니다.",
    "ex1": [
      "15"
    ],
    "ex2": [
      "3"
    ]
  },
  {
    "number": "ts 6",
    "title": "최대 길이 연속부분수열",
    "description": "0과 1로 구성된 길이가 N인 수열이 주어집니다. 여러분은 이 수열에서 최대 k번을 0을 1로 변경할 수 있습니다. 여러분이 최대 k번의 변경을 통해 이 수열에서 1로만 구성된 최대 길이의 연속부분수열을 찾는 프로그램을 작성하세요.\n\n만약 길이가 길이가 14인 다음과 같은 수열이 주어지고 k=2라면\n\n1 1 0 0 1 1 0 1 1 0 1 1 0 1\n\n여러분이 만들 수 있는 1이 연속된 연속부분수열은\n\nImage1.jpg\n\n이며 그 길이는 8입니다.",
    "input": "첫 번째 줄에 수열의 길이인 자연수 N(5<=N<100,000)이 주어집니다.\n\n두 번째 줄에 N길이의 0과 1로 구성된 수열이 주어집니다.",
    "output": "첫 줄에 최대 길이를 출력하세요.",
    "ex1": [
      "14 2",
      "1 1 0 0 1 1 0 1 1 0 1 1 0 1"
    ],
    "ex2": [
      "8"
    ]
  },
  {
    "number": "ht 1",
    "title": "학급 회장(해쉬)",
    "description": "학급 회장을 뽑는데 후보로 기호 A, B, C, D, E 후보가 등록을 했습니다.\n\n투표용지에는 반 학생들이 자기가 선택한 후보의 기호(알파벳)가 쓰여져 있으며 선생님은 그 기호를 발표하고 있습니다.\n\n선생님의 발표가 끝난 후 어떤 기호의 후보가 학급 회장이 되었는지 출력하는 프로그램을 작성하세요.\n\n반드시 한 명의 학급회장이 선출되도록 투표결과가 나왔다고 가정합니다.",
    "input": "첫 줄에는 반 학생수 N(5<=N<=50)이 주어집니다.\n\n두 번째 줄에 N개의 투표용지에 쓰여져 있던 각 후보의 기호가 선생님이 발표한 순서대로 문자열로 입력됩니다.",
    "output": "학급 회장으로 선택된 기호를 출력합니다.",
    "ex1": [
      "15",
      "BACBACCACCBDEDE"
    ],
    "ex2": [
      "C"
    ]
  },
  {
    "number": "ht 2",
    "title": "아나그램(해쉬)",
    "description": "Anagram이란 두 문자열이 알파벳의 나열 순서를 다르지만 그 구성이 일치하면 두 단어는 아나그램이라고 합니다.\n\n예를 들면 AbaAeCe 와 baeeACA 는 알파벳을 나열 순서는 다르지만 그 구성을 살펴보면 A(2), a(1), b(1), C(1), e(2)로\n\n알파벳과 그 개수가 모두 일치합니다. 즉 어느 한 단어를 재 배열하면 상대편 단어가 될 수 있는 것을 아나그램이라 합니다.\n\n길이가 같은 두 개의 단어가 주어지면 두 단어가 아나그램인지 판별하는 프로그램을 작성하세요. 아나그램 판별시 대소문자가 구분됩니다.\n\n\n",
    "input": "첫 줄에 첫 번째 단어가 입력되고, 두 번째 줄에 두 번째 단어가 입력됩니다.\n\n단어의 길이는 100을 넘지 않습니다.",
    "output": "두 단어가 아나그램이면 “YES\"를 출력하고, 아니면 ”NO\"를 출력합니다.",
    "ex1": [
      "AbaAeCe",
      "baeeACA"
    ],
    "ex2": [
      "YES"
    ],
    "ex3": [
      "abaCC",
      "Caaab"
    ],
    "ex4": [
      "NO"
    ]
  },
  {
    "number": "ht 3",
    "title": "매출액의 종류",
    "description": "현수의 아빠는 제과점을 운영합니다. 현수아빠는 현수에게 N일 동안의 매출기록을 주고 연속된 K일 동안의 매출액의 종류를\n\n각 구간별로 구하라고 했습니다.\n\n만약 N=7이고 7일 간의 매출기록이 아래와 같고, 이때 K=4이면\n\n20 12 20 10 23 17 10\n\n각 연속 4일간의 구간의 매출종류는\n\n첫 번째 구간은 [20, 12, 20, 10]는 매출액의 종류가 20, 12, 10으로 3이다.\n\n두 번째 구간은 [12, 20, 10, 23]는 매출액의 종류가 4이다.\n\n세 번째 구간은 [20, 10, 23, 17]는 매출액의 종류가 4이다.\n\n네 번째 구간은 [10, 23, 17, 10]는 매출액의 종류가 3이다.\n\nN일간의 매출기록과 연속구간의 길이 K가 주어지면 첫 번째 구간부터 각 구간별\n\n매출액의 종류를 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 N(5<=N<=100,000)과 K(2<=K<=N)가 주어집니다.\n\n두 번째 줄에 N개의 숫자열이 주어집니다. 각 숫자는 500이하의 음이 아닌 정수입니다.",
    "output": "첫 줄에 각 구간의 매출액 종류를 순서대로 출력합니다.",
    "ex1": [
      "7 4",
      "20 12 20 10 23 17 10"
    ],
    "ex2": [
      "3 4 4 3"
    ]
  },
  {
    "number": "ht 4",
    "title": "모든 아나그램 찾기",
    "description": "S문자열에서 T문자열과 아나그램이 되는 S의 부분문자열의 개수를 구하는 프로그램을 작성하세요.\n\n아나그램 판별시 대소문자가 구분됩니다. 부분문자열은 연속된 문자열이어야 합니다.",
    "input": "첫 줄에 첫 번째 S문자열이 입력되고, 두 번째 줄에 T문자열이 입력됩니다.\n\nS문자열의 길이는 10,000을 넘지 않으며, T문자열은 S문자열보다 길이가 작거나 같습니다.",
    "output": "S단어에 T문자열과 아나그램이 되는 부분문자열의 개수를 출력합니다.",
    "ex1": [
      "bacaAacba",
      "abc"
    ],
    "ex2": [
      "3"
    ]
  },
  {
    "number": "ht 5",
    "title": "K번째 큰 수",
    "description": "현수는 1부터 100사이의 자연수가 적힌 N장의 카드를 가지고 있습니다. 같은 숫자의 카드가 여러장 있을 수 있습니다.\n\n현수는 이 중 3장을 뽑아 각 카드에 적힌 수를 합한 값을 기록하려고 합니다. 3장을 뽑을 수 있는 모든 경우를 기록합니다.\n\n기록한 값 중 K번째로 큰 수를 출력하는 프로그램을 작성하세요.\n\n만약 큰 수부터 만들어진 수가 25 25 23 23 22 20 19......이고 K값이 3이라면 K번째 큰 값은 22입니다.",
    "input": "첫 줄에 자연수 N(3<=N<=100)과 K(1<=K<=50) 입력되고, 그 다음 줄에 N개의 카드값이 입력된다.",
    "output": "첫 줄에 K번째 수를 출력합니다. K번째 수가 존재하지 않으면 -1를 출력합니다.",
    "ex1": [
      "10 3",
      "13 15 34 23 45 65 33 11 26 42"
    ],
    "ex2": [
      "143"
    ]
  },
  {
    "number": "sq 1",
    "title": "올바른 괄호",
    "description": "괄호가 입력되면 올바른 괄호이면 “YES\", 올바르지 않으면 ”NO\"를 출력합니다.\n\n(())() 이것은 괄호의 쌍이 올바르게 위치하는 거지만, (()()))은 올바른 괄호가 아니다.",
    "input": "첫 번째 줄에 괄호 문자열이 입력됩니다. 문자열의 최대 길이는 30이다.",
    "output": "첫 번째 줄에 YES, NO를 출력한다.",
    "ex1": [
      "(()(()))(()"
    ],
    "ex2": [
      "NO"
    ]
  },
  {
    "number": "sq 2",
    "title": "괄호문자제거",
    "description": "입력된 문자열에서 소괄호 ( ) 사이에 존재하는 모든 문자를 제거하고 남은 문자만 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 문자열이 주어진다. 문자열의 길이는 100을 넘지 않는다.",
    "output": "남은 문자만 출력한다.",
    "ex1": [
      "(A(BC)D)EF(G(H)(IJ)K)LM(N)"
    ],
    "ex2": [
      "EFLM"
    ]
  },
  {
    "number": "sq 3",
    "title": "크레인 인형뽑기(카카오)",
    "description": "게임개발자인 죠르디는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.\n\n죠르디는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.\n\nImage1.jpg\n\n게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다.\n\n(위 그림은 5 x 5 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.\n\n모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다.\n\n게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데,\n\n이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.\n\n다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.\n\nImage1.jpg\n\n만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다.\n\n위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.\n\nImage1.jpg\n\n크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다.\n\n또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)\n\n게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때,\n\n크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 구하는 프로그램을 작성하세요.",
    "input": "첫 줄에 자연수 N(5<=N<=30)이 주어집니다.\n\n두 번째 줄부터 N*N board 배열이 주어집니다.\n\nboard의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.\n\n0은 빈 칸을 나타냅니다.\n\n1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.\n\nboard배열이 끝난 다음줄에 moves 배열의 길이 M이 주어집니다.\n\n마지막 줄에는 moves 배열이 주어집니다.\n\nmoves 배열의 크기는 1 이상 1,000 이하입니다.\n\nmoves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.",
    "output": "첫 줄에 터트려져 사라진 인형의 개수를 출력합니다.",
    "ex1": [
      "5",
      "0 0 0 0 0",
      "0 0 1 0 3",
      "0 2 5 0 1",
      "4 2 4 4 2",
      "3 5 1 3 1",
      "8",
      "1 5 3 5 1 2 1 4"
    ],
    "ex2": [
      "4"
    ]
  },
  {
    "number": "sq 4",
    "title": "후위식 연산(postfix)",
    "description": "후위연산식이 주어지면 연산한 결과를 출력하는 프로그램을 작성하세요.\n\n만약 3*(5+2)-9 을 후위연산식으로 표현하면 352+*9- 로 표현되며 그 결과는 12입니다.\n\n\n",
    "input": "첫 줄에 후위연산식이 주어집니다. 연산식의 길이는 50을 넘지 않습니다.\n\n식은 1~9의 숫자와 +, -, *, / 연산자로만 이루어진다.\n\n\n",
    "output": "연산한 결과를 출력합니다.",
    "ex1": [
      "352+*9-"
    ],
    "ex2": [
      "12"
    ]
  },
  {
    "number": "sq 5",
    "title": "쇠막대기",
    "description": "여러 개의 쇠막대기를 레이저로 절단하려고 한다. 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고,\n\n레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.\n\n• 쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. - 쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되,\n\n끝점은 겹치지 않도록 놓는다.\n\n• 각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.\n\n• 레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.\n\n아래 그림은 위 조건을 만족하는 예를 보여준다. 수평으로 그려진 굵은 실선은 쇠막대기이고, 점은 레이저의 위치,\n\n수직으로 그려진 점선 화살표는 레이저의 발사 방향이다.\n\nImage1.jpg\n\n이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.\n\n1. 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반 드시 레이저를 표현한다.\n\n2. 쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.\n\n위 예의 괄호 표현은 그림 위에 주어져 있다.\n\n쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고,\n\n이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.\n\n쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.",
    "input": "한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 괄호 문자의 개수는 최대 100,000이다.",
    "output": "잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.",
    "ex1": [
      "()(((()())(())()))(())",
      "(((()(()()))(())()))(()())"
    ],
    "ex2": [
      "17",
      "24"
    ]
  },
  {
    "number": "sq 6",
    "title": "공주 구하기",
    "description": "정보 왕국의 이웃 나라 외동딸 공주가 숲속의 괴물에게 잡혀갔습니다.\n\n정보 왕국에는 왕자가 N명이 있는데 서로 공주를 구하러 가겠다고 합니다.\n\n정보왕국의 왕은 다음과 같은 방법으로 공주를 구하러 갈 왕자를 결정하기로 했습니다.\n\n왕은 왕자들을 나이 순으로 1번부터 N번까지 차례로 번호를 매긴다.\n\n그리고 1번 왕자부터 N번 왕자까지 순서대로 시계 방향으로 돌아가며 동그랗게 앉게 한다.\n\n그리고 1번 왕자부터 시계방향으로 돌아가며 1부터 시작하여 번호를 외치게 한다.\n\n한 왕자가 K(특정숫자)를 외치면 그 왕자는 공주를 구하러 가는데서 제외되고 원 밖으로 나오게 된다.\n\n그리고 다음 왕자부터 다시 1부터 시작하여 번호를 외친다.\n\n이렇게 해서 마지막까지 남은 왕자가 공주를 구하러 갈 수 있다.\n\nImage1.jpg\n\n예를 들어 총 8명의 왕자가 있고, 3을 외친 왕자가 제외된다고 하자. 처음에는 3번 왕자가 3을 외쳐 제외된다.\n\n이어 6, 1, 5, 2, 8, 4번 왕자가 차례대로 제외되고 마지막까지 남게 된 7번 왕자에게 공주를 구하러갑니다.\n\nN과 K가 주어질 때 공주를 구하러 갈 왕자의 번호를 출력하는 프로그램을 작성하시오.",
    "input": "첫 줄에 자연수 N(5<=N<=1,000)과 K(2<=K<=9)가 주어진다.",
    "output": "첫 줄에 마지막 남은 왕자의 번호를 출력합니다.",
    "ex1": [
      "8 3"
    ],
    "ex2": [
      "7"
    ]
  },
  {
    "number": "sq 7",
    "title": "교육과정 설계",
    "description": "현수는 1년 과정의 수업계획을 짜야 합니다.\n\n수업중에는 필수과목이 있습니다. 이 필수과목은 반드시 이수해야 하며, 그 순서도 정해져 있습니다.\n\n만약 총 과목이 A, B, C, D, E, F, G가 있고, 여기서 필수과목이 CBA로 주어지면 필수과목은 C, B, A과목이며 이 순서대로 꼭 수업계획을 짜야 합니다.\n\n여기서 순서란 B과목은 C과목을 이수한 후에 들어야 하고, A과목은 C와 B를 이수한 후에 들어야 한다는 것입니다.\n\n현수가 C, B, D, A, G, E로 수업계획을 짜면 제대로 된 설계이지만\n\nC, G, E, A, D, B 순서로 짰다면 잘 못 설계된 수업계획이 됩니다.\n\n수업계획은 그 순서대로 앞에 수업이 이수되면 다음 수업을 시작하다는 것으로 해석합니다.\n\n수업계획서상의 각 과목은 무조건 이수된다고 가정합니다.\n\n필수과목순서가 주어지면 현수가 짠 N개의 수업설계가 잘된 것이면 “YES\", 잘못된 것이면 ”NO“를 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 한 줄에 필수과목의 순서가 주어집니다. 모든 과목은 영문 대문자입니다.\n\n두 번 째 줄부터 현수가 짠 수업설계가 주어집니다.(수업설계의 길이는 30이하이다)",
    "output": "첫 줄에 수업설계가 잘된 것이면 “YES\", 잘못된 것이면 ”NO“를 출력합니다.",
    "ex1": [
      "CBA",
      "CBDAGE"
    ],
    "ex2": [
      "YES"
    ]
  },
  {
    "number": "sq 8",
    "title": "응급실",
    "description": "메디컬 병원 응급실에는 의사가 한 명밖에 없습니다.\n\n응급실은 환자가 도착한 순서대로 진료를 합니다. 하지만 위험도가 높은 환자는 빨리 응급조치를 의사가 해야 합니다.\n\n이런 문제를 보완하기 위해 응급실은 다음과 같은 방법으로 환자의 진료순서를 정합니다.\n\n• 환자가 접수한 순서대로의 목록에서 제일 앞에 있는 환자목록을 꺼냅니다.\n\n• 나머지 대기 목록에서 꺼낸 환자 보다 위험도가 높은 환자가 존재하면 대기목록 제일 뒤로 다시 넣습니다. 그렇지 않으면 진료를 받습니다.\n\n즉 대기목록에 자기 보다 위험도가 높은 환자가 없을 때 자신이 진료를 받는 구조입니다.\n\n현재 N명의 환자가 대기목록에 있습니다.\n\nN명의 대기목록 순서의 환자 위험도가 주어지면, 대기목록상의 M번째 환자는 몇 번째로 진료를 받는지 출력하는 프로그램을 작성하세요.\n\n대기목록상의 M번째는 대기목록의 제일 처음 환자를 0번째로 간주하여 표현한 것입니다.",
    "input": "첫 줄에 자연수 N(5<=N<=100)과 M(0<=M<N) 주어집니다.\n\n두 번째 줄에 접수한 순서대로 환자의 위험도(50<=위험도<=100)가 주어집니다.\n\n위험도는 값이 높을 수록 더 위험하다는 뜻입니다. 같은 값의 위험도가 존재할 수 있습니다.",
    "output": "M번째 환자의 몇 번째로 진료받는지 출력하세요.",
    "ex1": [
      "5 2",
      "60 50 70 80 90"
    ],
    "ex2": [
      "3"
    ],
    "ex3": [
      "6 3",
      "70 60 90 60 60 60"
    ],
    "ex4": [
      "4"
    ]
  },
  {
    "number": "ss 1",
    "title": "선택 정렬",
    "description": "N개이 숫자가 입력되면 오름차순으로 정렬하여 출력하는 프로그램을 작성하세요.\n\n정렬하는 방법은 선택정렬입니다.\n\n\n",
    "input": "첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.\n\n두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.",
    "output": "오름차순으로 정렬된 수열을 출력합니다.",
    "ex1": [
      "6",
      "13 5 11 7 23 15"
    ],
    "ex2": [
      "5 7 11 13 15 23"
    ]
  },
  {
    "number": "ss 2",
    "title": "버블 정렬",
    "description": "N개이 숫자가 입력되면 오름차순으로 정렬하여 출력하는 프로그램을 작성하세요.\n\n정렬하는 방법은 버블정렬입니다.",
    "input": "첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.\n\n두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.",
    "output": "첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.\n\n두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.",
    "ex1": [
      "6",
      "13 5 11 7 23 15"
    ],
    "ex2": [
      "5 7 11 13 15 23"
    ]
  },
  {
    "number": "ss 3",
    "title": "삽입 정렬",
    "description": "N개이 숫자가 입력되면 오름차순으로 정렬하여 출력하는 프로그램을 작성하세요.\n\n",
    "input": "첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.\n\n두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다. 각 자연수는 정수형 범위 안에 있습니다.",
    "output": "오름차순으로 정렬된 수열을 출력합니다.",
    "ex1": [
      "6",
      "11 7 5 6 10 9"
    ],
    "ex2": [
      "5 6 7 9 10 11"
    ]
  },
  {
    "number": "ss 4",
    "title": "Least Recently Used",
    "description": "캐시메모리는 CPU와 주기억장치(DRAM) 사이의 고속의 임시 메모리로서 CPU가 처리할 작업을 저장해 놓았다가\n\n필요할 바로 사용해서 처리속도를 높이는 장치이다. 워낙 비싸고 용량이 작아 효율적으로 사용해야 한다.\n\n철수의 컴퓨터는 캐시메모리 사용 규칙이 LRU 알고리즘을 따른다.\n\nLRU 알고리즘은 Least Recently Used 의 약자로 직역하자면 가장 최근에 사용되지 않은 것 정도의 의미를 가지고 있습니다.\n\n캐시에서 작업을 제거할 때 가장 오랫동안 사용하지 않은 것을 제거하겠다는 알고리즘입니다.\n\nImage1.jpg\n\n캐시의 크기가 주어지고, 캐시가 비어있는 상태에서 N개의 작업을 CPU가 차례로 처리한다면 N개의 작업을 처리한 후\n\n캐시메모리의 상태를 가장 최근 사용된 작업부터 차례대로 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 캐시의 크기인 S(3<=S<=10)와 작업의 개수 N(5<=N<=1,000)이 입력된다.\n\n두 번째 줄에 N개의 작업번호가 처리순으로 주어진다. 작업번호는 1 ~100 이다.",
    "output": "마지막 작업 후 캐시메모리의 상태를 가장 최근 사용된 작업부터 차례로 출력합니다.",
    "ex1": [
      "5 9",
      "1 2 3 2 6 2 3 5 7"
    ],
    "ex2": [
      "7 5 3 2 6"
    ]
  },
  {
    "number": "ss 5",
    "title": "중복 확인",
    "description": "현수네 반에는 N명의 학생들이 있습니다.\n\n선생님은 반 학생들에게 1부터 10,000,000까지의 자연수 중에서 각자가 좋아하는 숫자 하나 적어 내라고 했습니다.\n\n만약 N명의 학생들이 적어낸 숫자 중 중복된 숫자가 존재하면 D(duplication)를 출력하고,\n\nN명이 모두 각자 다른 숫자를 적어냈다면 U(unique)를 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 자연수 N(5<=N<=100,000)이 주어진다.\n\n두 번째 줄에 학생들이 적어 낸 N개의 자연수가 입력된다.",
    "output": "첫 번째 줄에 D 또는 U를 출력한다.",
    "ex1": [
      "8",
      "20 25 52 30 39 33 43 33"
    ],
    "ex2": [
      "D"
    ]
  },
  {
    "number": "ss 6",
    "title": "장난꾸러기",
    "description": "새 학기가 시작되었습니다. 철수는 새 짝꿍을 만나 너무 신이 났습니다.\n\n철수네 반에는 N명의 학생들이 있습니다.\n\n선생님은 반 학생들에게 반 번호를 정해 주기 위해 운동장에 반 학생들을 키가 가장 작은 학생부터 일렬로 키순으로 세웠습니다.\n\n제일 앞에 가장 작은 학생부터 반 번호를 1번부터 N번까지 부여합니다. 철수는 짝꿍보다 키가 큽니다.\n\n그런데 철수가 앞 번호를 받고 싶어 짝꿍과 자리를 바꿨습니다.\n\n선생님은 이 사실을 모르고 학생들에게 서있는 순서대로 번호를 부여했습니다.\n\n철수와 짝꿍이 자리를 바꾼 반 학생들의 일렬로 서있는 키 정보가 주어질 때 철수가 받은 번호와 철수 짝꿍이 받은 번호를\n\n차례로 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 자연수 N(5<=N<=100)이 주어진다.\n\n두 번째 줄에 제일 앞에부터 일렬로 서있는 학생들의 키가 주어진다.\n\n키(높이) 값 H는 (120<=H<=180)의 자연수 입니다.",
    "output": "첫 번째 줄에 철수의 반 번호와 짝꿍의 반 번호를 차례로 출력합니다.",
    "ex1": [
      "9",
      "120 125 152 130 135 135 143 127 160"
    ],
    "ex2": [
      "3 8"
    ]
  },
  {
    "number": "ss 7",
    "title": "좌표 정렬",
    "description": "N개의 평면상의 좌표(x, y)가 주어지면 모든 좌표를 오름차순으로 정렬하는 프로그램을 작성하세요.\n\n정렬기준은 먼저 x값의 의해서 정렬하고, x값이 같을 경우 y값에 의해 정렬합니다.",
    "input": "첫째 줄에 좌표의 개수인 N(3<=N<=100,000)이 주어집니다.\n\n두 번째 줄부터 N개의 좌표가 x, y 순으로 주어집니다. x, y값은 양수만 입력됩니다.",
    "output": "N개의 좌표를 정렬하여 출력하세요.",
    "ex1": [
      "5",
      "2 7",
      "1 3",
      "1 2",
      "2 5",
      "3 6"
    ],
    "ex2": [
      "1 2",
      "1 3",
      "2 5",
      "2 7",
      "3 6"
    ]
  },
  {
    "number": "ss 8",
    "title": "이분검색",
    "description": "임의의 N개의 숫자가 입력으로 주어집니다. N개의 수를 오름차순으로 정렬한 다음 N개의 수 중 한 개의 수인 M이 주어지면\n\n이분검색으로 M이 정렬된 상태에서 몇 번째에 있는지 구하는 프로그램을 작성하세요. 단 중복값은 존재하지 않습니다.",
    "input": "첫 줄에 한 줄에 자연수 N(3<=N<=1,000,000)과 M이 주어집니다.\n\n두 번째 줄에 N개의 수가 공백을 사이에 두고 주어집니다.",
    "output": "첫 줄에 정렬 후 M의 값의 위치 번호를 출력한다.",
    "ex1": [
      "8 32",
      "23 87 65 12 57 32 99 81"
    ],
    "ex2": [
      "3"
    ]
  },
  {
    "number": "ss 9",
    "title": "뮤직비디오(결정알고리즘)",
    "description": "지니레코드에서는 불세출의 가수 조영필의 라이브 동영상을 DVD로 만들어 판매하려 한다.\n\nDVD에는 총 N개의 곡이 들어가는데, DVD에 녹화할 때에는 라이브에서의 순서가 그대로 유지되어야 한다.\n\n순서가 바뀌는 것을 우리의 가수 조영필씨가 매우 싫어한다. 즉, 1번 노래와 5번 노래를 같은 DVD에 녹화하기 위해서는\n\n1번과 5번 사이의 모든 노래도 같은 DVD에 녹화해야 한다. 또한 한 노래를 쪼개서 두 개의 DVD에 녹화하면 안된다.\n\n지니레코드 입장에서는 이 DVD가 팔릴 것인지 확신할 수 없기 때문에 이 사업에 낭비되는 DVD를 가급적 줄이려고 한다.\n\n고민 끝에 지니레코드는 M개의 DVD에 모든 동영상을 녹화하기로 하였다. 이 때 DVD의 크기(녹화 가능한 길이)를 최소로 하려고 한다.\n\n그리고 M개의 DVD는 모두 같은 크기여야 제조원가가 적게 들기 때문에 꼭 같은 크기로 해야 한다.",
    "input": "첫째 줄에 자연수 N(1≤N≤1,000), M(1≤M≤N)이 주어진다.\n\n다음 줄에는 조영필이 라이브에서 부른 순서대로 부른 곡의 길이가 분 단위로(자연수) 주어진다.\n\n부른 곡의 길이는 10,000분을 넘지 않는다고 가정하자.",
    "output": "첫 번째 줄부터 DVD의 최소 용량 크기를 출력하세요.",
    "ex1": [
      "9 3",
      "1 2 3 4 5 6 7 8 9"
    ],
    "ex2": [
      "17"
    ]
  },
  {
    "number": "ss 10",
    "title": "마구간 정하기(결정알고리즘)",
    "description": "N개의 마구간이 수직선상에 있습니다. 각 마구간은 x1, x2, x3, ......, xN의 좌표를 가지며, 마구간간에 좌표가 중복되는 일은 없습니다.\n\n현수는 C마리의 말을 가지고 있는데, 이 말들은 서로 가까이 있는 것을 좋아하지 않습니다. 각 마구간에는 한 마리의 말만 넣을 수 있고,\n\n가장 가까운 두 말의 거리가 최대가 되게 말을 마구간에 배치하고 싶습니다.\n\nC마리의 말을 N개의 마구간에 배치했을 때 가장 가까운 두 말의 거리가 최대가 되는 그 최대값을 출력하는 프로그램을 작성하세요.",
    "input": "첫 줄에 자연수 N(3<=N<=200,000)과 C(2<=C<=N)이 공백을 사이에 두고 주어집니다.\n\n둘째 줄에 마구간의 좌표 xi(0<=xi<=1,000,000,000)가 차례로 주어집니다.",
    "output": "첫 줄에 가장 가까운 두 말의 최대 거리를 출력하세요.",
    "ex1": [
      "5 3",
      "1 2 8 4 9"
    ],
    "ex2": [
      "3"
    ]
  },
  {
    "number": "rt 1",
    "title": "재귀함수",
    "description": "자연수 N이 입력되면 재귀함수를 이용하여 1부터 N까지 출력.",
    "input": "첫 번째 줄은 정수 N(3<=N<=10)이 입력된다",
    "output": "첫 줄에 출력하세요.",
    "ex1": [
      "3"
    ],
    "ex2": [
      "1 2 3"
    ]
  },
  {
    "number": "rt 2",
    "title": "재귀함수를 이용한 이진수 출력",
    "description": "10진수 N이 입력되면 2진수로 변환하여 출력하세요. 단 재귀함수를 이용.",
    "input": "첫 번째 줄에 10진수 N(1<=N<=1000)이 주어진다.",
    "output": "첫 줄에 이진수를 출력하세요.",
    "ex1": [
      "11"
    ],
    "ex2": [
      "1011"
    ]
  },
  {
    "number": "rt 3",
    "title": "팩토리얼",
    "description": "자연수 N이 입력되면 N!를 구하는 프로그램을 작성하세요. 예를들어 5! = 5*4*3*2*1 = 120 입니다.",
    "input": "첫 번째 줄에 자연수 N(1<=N<=100)이 주어진다.",
    "output": "첫 번째 줄에 N팩토리얼 값을 출력합니다.",
    "ex1": [
      "5"
    ],
    "ex2": [
      "120"
    ]
  },
  {
    "number": "rt 4",
    "title": "피보나치 수열",
    "description": "1)피보나키 수열을 출력한다. 피보나치 수열이란 앞의 2개의 수를 합하여 다음 숫자가 되는 수열이다. 2)입력은 피보나치 수열의 총 항의 수 이다. 만약 7이 입력되면 1 1 2 3 5 8 13을 출력하면 된다.",
    "input": "첫 줄에 총 항수 N(3<=N<=45)이 입력된다.",
    "output": "첫 줄에 피보나치 수열을 출력한다.",
    "ex1": [
      "10"
    ],
    "ex2": [
      "1 1 2 3 5 8 13 21 34 55"
    ]
  },
  {
    "number": "rt 5",
    "title": "이진트리 순회(깊이우선탐색)",
    "description": "이진트리의 전위순회 후위순회 중위순회를 연습해보세요",
    "input": "이진트리 1 2 3 4 5 6 7",
    "output": "전위 중위 후위 출력",
    "ex1": [
      ""
    ],
    "ex2": [
      "전위순회 : 1 2 4 5 3 6 7",
      "중위순회 : 4 2 5 1 6 3 7",
      "후위순회 : 4 5 2 6 7 3 1"
    ]
  },
  {
    "number": "rt 6",
    "title": "부분집합 구하기(DFS)",
    "description": "자연수 N이 주어지면 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 자연수 N(1<=N<=10)이 주어집니다.",
    "output": "첫 번째 줄부터 각 줄에 하나씩 부분집합을 아래와 출력예제와 같은 순서로 출력한다. 단 공집합은 출력하지 않습니다.",
    "ex1": [
      "3"
    ],
    "ex2": [
      "1 2 3",
      "1 2 ",
      "1 3",
      "1",
      "2 3",
      "2",
      "3"
    ]
  },
  {
    "number": "rt 7",
    "title": "이진트리 순회(넓이우선탑색 : 레벨탐색)",
    "description": "아래 그림과 같은 이진트리를 레벨탐색하세요",
    "input": "1 2 3 4 5 6 7",
    "output": "",
    "ex1": [
      ""
    ],
    "ex2": [
      "레벨 탐색 순회 출력 : 1 2 3 4 5 6 7"
    ]
  },
  {
    "number": "rt 8",
    "title": "송아지 찾기 1(BFS : 상태트리탐색)",
    "description": "현수는 송아지를 잃어버렸다. 다행히 송아지에는 위치추적기가 달려 있다.\n\n현수의 위치와 송아지의 위치가 수직선상의 좌표 점으로 주어지면 현수는 현재 위치에서 송아지의 위치까지 다음과 같은 방법으로 이동한다.\n\n송아지는 움직이지 않고 제자리에 있다.\n\n현수는 스카이 콩콩을 타고 가는데 한 번의 점프로 앞으로 1, 뒤로 1, 앞으로 5를 이동할 수 있다.\n\n최소 몇 번의 점프로 현수가 송아지의 위치까지 갈 수 있는지 구하는 프로그램을 작성하세요.",
    "input": "첫 번째 줄에 현수의 위치 S와 송아지의 위치 E가 주어진다. 직선의 좌표 점은 1부터 10,000까지이다.",
    "output": "점프의 최소횟수를 구한다. 답은 1이상이며 반드시 존재합니다.",
    "ex1": [
      "5 14"
    ],
    "ex2": [
      "3"
    ]
  },
  {
    "number": "rt 9 DFS",
    "title": "Tree 말단 노드까지의 가장 짧은 경로",
    "description": "이진트리에서 루트 노드 1에서 말단노드까지의 길이 중 가장 짧은 길이를 구하는 프로그램을 작성하세요. 각 경로의 길이는 루트노드에서 말단노드까지 가는데 이동하는 횟수를 즉 간선(에지)의 개수를 길이로 하겠습니다.",
    "input": "1 | 2 3 | 4 5",
    "output": "가장 짧은 길이는 3번 노드까지의 길이인 1이다",
    "ex1": [
      ""
    ],
    "ex2": [
      ""
    ]
  },
  {
    "number": "rt 10 BFS",
    "title": "Tree 말단 노드까지의 가장 짧은 경로",
    "description": "이진트리에서 루트 노드 1에서 말단노드까지의 길이 중 가장 짧은 길이를 구하는 프로그램을 작성하세요. 각 경로의 길이는 루트노드에서 말단노드까지 가는데 이동하는 횟수를 즉 간선(에지)의 개수를 길이로 하겠습니다.",
    "input": "1 | 2 3 | 4 5",
    "output": "가장 짧은 길이는 3번 노드까지의 길이인 1이다",
    "ex1": [
      ""
    ],
    "ex2": [
      ""
    ]
  },
  {
    "number": "rt 12",
    "title": "경로탐색(인접행렬) (DFS)",
    "description": "방향 그래프가 주어지면 1번 정점에서 N번 정점으로 가는 모든 경로의 가지 수를 출력하는 프로그램을 작성하세요. 아래 그래프에서 1번 정점에서 5번 정점으로 가는 가지수는 1 2 3 4 5 | 1 2 5 | 1 3 4 2 5 | 1 3 4 5 | 1 4 2 5 | 1 4 5 총 6 가지 입니다.",
    "input": "첫째 줄에는 정점의 수 N(1<=N<=20)와 간선의 수 M가 주어진다. 그 다음부터 M줄에 걸쳐 연결정보가 주어진다",
    "output": "총 가지수를 출력한다.",
    "ex1": [
      "5 9",
      "1 2",
      "1 3",
      "1 4 ",
      "2 1",
      "2 3",
      "2 5",
      "3 4",
      "4 2",
      "4 5"

    ],
    "ex2": [
      "6"
    ]
  }
]